#ifndef FB_MELODIES_BUILDER_H
#define FB_MELODIES_BUILDER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FB_MELODIES_READER_H
#include <fb_melodies_reader.h>
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include <flatbuffers_common_builder.h>
#endif
#include <flatcc/flatcc_prologue.h>
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __melodies_Tone_required[] = { 0 };
typedef flatbuffers_ref_t melodies_Tone_ref_t;
static melodies_Tone_ref_t melodies_Tone_clone(flatbuffers_builder_t *B, melodies_Tone_table_t t);
__flatbuffers_build_table(flatbuffers_, melodies_Tone, 2)

static const flatbuffers_voffset_t __melodies_Melody_required[] = { 0 };
typedef flatbuffers_ref_t melodies_Melody_ref_t;
static melodies_Melody_ref_t melodies_Melody_clone(flatbuffers_builder_t *B, melodies_Melody_table_t t);
__flatbuffers_build_table(flatbuffers_, melodies_Melody, 3)

#define __melodies_Tone_formal_args , float v0, int32_t v1
#define __melodies_Tone_call_args , v0, v1
static inline melodies_Tone_ref_t melodies_Tone_create(flatbuffers_builder_t *B __melodies_Tone_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, melodies_Tone, melodies_Tone_file_identifier, melodies_Tone_type_identifier)

#define __melodies_Melody_formal_args , flatbuffers_string_ref_t v0, melodies_Tone_vec_ref_t v1, float v2
#define __melodies_Melody_call_args , v0, v1, v2
static inline melodies_Melody_ref_t melodies_Melody_create(flatbuffers_builder_t *B __melodies_Melody_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, melodies_Melody, melodies_Melody_file_identifier, melodies_Melody_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, melodies_Tone_frequency, flatbuffers_float, float, 4, 4, 0.00000000f, melodies_Tone)
__flatbuffers_build_scalar_field(1, flatbuffers_, melodies_Tone_duration, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), melodies_Tone)

static inline melodies_Tone_ref_t melodies_Tone_create(flatbuffers_builder_t *B __melodies_Tone_formal_args)
{
    if (melodies_Tone_start(B)
        || melodies_Tone_frequency_add(B, v0)
        || melodies_Tone_duration_add(B, v1)) {
        return 0;
    }
    return melodies_Tone_end(B);
}

static melodies_Tone_ref_t melodies_Tone_clone(flatbuffers_builder_t *B, melodies_Tone_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (melodies_Tone_start(B)
        || melodies_Tone_frequency_pick(B, t)
        || melodies_Tone_duration_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, melodies_Tone_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, melodies_Melody_label, melodies_Melody)
__flatbuffers_build_table_vector_field(1, flatbuffers_, melodies_Melody_tones, melodies_Tone, melodies_Melody)
__flatbuffers_build_scalar_field(2, flatbuffers_, melodies_Melody_speed, flatbuffers_float, float, 4, 4, 0.00000000f, melodies_Melody)

static inline melodies_Melody_ref_t melodies_Melody_create(flatbuffers_builder_t *B __melodies_Melody_formal_args)
{
    if (melodies_Melody_start(B)
        || melodies_Melody_label_add(B, v0)
        || melodies_Melody_tones_add(B, v1)
        || melodies_Melody_speed_add(B, v2)) {
        return 0;
    }
    return melodies_Melody_end(B);
}

static melodies_Melody_ref_t melodies_Melody_clone(flatbuffers_builder_t *B, melodies_Melody_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (melodies_Melody_start(B)
        || melodies_Melody_label_pick(B, t)
        || melodies_Melody_tones_pick(B, t)
        || melodies_Melody_speed_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, melodies_Melody_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* FB_MELODIES_BUILDER_H */
